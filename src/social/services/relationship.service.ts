import { Injectable, BadRequestException, ConflictException, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Relationship, RelationshipStatus } from '../entities/relationship.entity';
import { User } from '../../users/entities/user.entity';
import { UsersService } from '../../users/users.service';
import { UserContextService } from './user-context.service';
import {
  RelationshipResponseDto,
  GetFriendsDto,
  SendFriendRequestDto,
  SendFriendRequestResponseDto,
  FriendRequestDto,
  GetFriendRequestsDto,
  FriendRequestActionResponseDto,
} from '../dto/relationship.dto';

@Injectable()
export class RelationshipService {
  constructor(
    @InjectRepository(Relationship)
    private relationshipRepository: Repository<Relationship>,
    @InjectRepository(User)
    private userRepository: Repository<User>,
    private usersService: UsersService,
    private userContextService: UserContextService,
  ) {}

  /**
   * L·∫•y danh s√°ch b·∫°n b√® ƒë√£ k·∫øt b·∫°n c·ªßa user
   * Logic ƒë∆°n gi·∫£n: ch·ªâ l·∫•y nh·ªØng relationship c√≥ status = ACCEPTED
   */
  async getFriends(
    userEmail: string,
    query: GetFriendsDto
  ): Promise<{ friends: RelationshipResponseDto[]; total: number }> {
    // T√¨m user t·ª´ email
    const currentUser = await this.usersService.findByEmail(userEmail);
    if (!currentUser) {
      return { friends: [], total: 0 };
    }

    const { page = 1, limit = 20, search } = query;
    const skip = (page - 1) * limit;

    // Query ƒë∆°n gi·∫£n: ch·ªâ l·∫•y relationship ƒë√£ accepted
    const queryBuilder = this.relationshipRepository
      .createQueryBuilder('relationship')
      .where('relationship.userEmail = :userEmail AND relationship.status = :status', {
        userEmail,
        status: RelationshipStatus.ACCEPTED
      });

    // T√¨m ki·∫øm theo email c·ªßa friend
    if (search) {
      queryBuilder.andWhere(
        'relationship.friendEmail ILIKE :search',
        { search: `%${search}%` }
      );
    }

    // S·∫Øp x·∫øp v√† ph√¢n trang
    queryBuilder
      .orderBy('relationship.createdAt', 'DESC')
      .skip(skip)
      .take(limit);

    const [relationships, total] = await queryBuilder.getManyAndCount();

    console.log('üîç Debug RelationshipService:');
    console.log('- user_email:', userEmail);
    console.log('- relationships found:', relationships.length);
    console.log('- total:', total);
    console.log('- sample relationship:', relationships[0]);

    // ‚úÖ OPTIMIZED: Batch load friend users ƒë·ªÉ tr√°nh N+1 queries
    const friendEmails = relationships.map(r => r.friendEmail);
    const friendUsersMap = await this.userContextService.getUsersByEmails(friendEmails);

    // Transform data th√†nh format c·∫ßn thi·∫øt cho frontend
    const friends: RelationshipResponseDto[] = relationships.map((relationship) => {
      const friendUser = friendUsersMap.get(relationship.friendEmail);

      return {
        id: relationship.id,
        friend: {
          id: friendUser?.id || '',
          email: relationship.friendEmail,
          username: friendUser?.username || '',
          name: friendUser?.name || '',
          avatar: friendUser?.avatar || null,
        },
        status: relationship.status,
        initiatedBy: relationship.initiatedBy,
        message: relationship.message,
        createdAt: relationship.createdAt,
        acceptedAt: relationship.acceptedAt,
      };
    });

    return { friends, total };
  }

  /**
   * G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
   */
  async sendFriendRequest(
    senderEmail: string,
    sendFriendRequestDto: SendFriendRequestDto
  ): Promise<SendFriendRequestResponseDto> {
    const { friendEmail, message } = sendFriendRequestDto;

    // 1. Validation: Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi cho ch√≠nh m√¨nh
    if (senderEmail === friendEmail) {
      throw new BadRequestException('Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n cho ch√≠nh m√¨nh');
    }

    // 2. Ki·ªÉm tra user ng∆∞·ªùi nh·∫≠n c√≥ t·ªìn t·∫°i kh√¥ng
    const friendUser = await this.usersService.findByEmail(friendEmail);
    if (!friendUser) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y');
    }

    // 3. Ki·ªÉm tra m·ªëi quan h·ªá ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingRelationship = await this.checkExistingRelationship(senderEmail, friendEmail);
    if (existingRelationship) {
      switch (existingRelationship.status) {
        case RelationshipStatus.ACCEPTED:
          throw new ConflictException('B·∫°n ƒë√£ l√† b·∫°n b√® v·ªõi ng∆∞·ªùi n√†y r·ªìi');
        case RelationshipStatus.PENDING:
          throw new ConflictException('L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥');
        case RelationshipStatus.BLOCKED:
          throw new ConflictException('Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n');
        case RelationshipStatus.REJECTED:
          // Cho ph√©p g·ª≠i l·∫°i sau khi b·ªã t·ª´ ch·ªëi
          break;
      }
    }

    // 4. T·∫°o ho·∫∑c c·∫≠p nh·∫≠t relationship
    let relationship: Relationship;
    
    if (existingRelationship && existingRelationship.status === RelationshipStatus.REJECTED) {
      // C·∫≠p nh·∫≠t relationship c≈©
      existingRelationship.status = RelationshipStatus.PENDING;
      existingRelationship.initiatedBy = senderEmail;
      existingRelationship.message = message || null;
      existingRelationship.acceptedAt = null;
      existingRelationship.blockedAt = null;
      relationship = await this.relationshipRepository.save(existingRelationship);

      // ‚úÖ FIX #5: T√¨m v√† c·∫≠p nh·∫≠t reverse relationship c≈©
      const oldReverseRelationship = await this.relationshipRepository.findOne({
        where: {
          userEmail: friendEmail,
          friendEmail: senderEmail,
          status: RelationshipStatus.REJECTED,
        }
      });
      
      if (oldReverseRelationship) {
        oldReverseRelationship.status = RelationshipStatus.RECEIVED;
        oldReverseRelationship.initiatedBy = senderEmail;
        oldReverseRelationship.message = message || null;
        oldReverseRelationship.acceptedAt = null;
        oldReverseRelationship.blockedAt = null;
        await this.relationshipRepository.save(oldReverseRelationship);
      } else {
        // N·∫øu kh√¥ng t√¨m th·∫•y reverse relationship c≈©, t·∫°o m·ªõi
        const newReverseRelationship = this.relationshipRepository.create({
          userEmail: friendEmail,
          friendEmail: senderEmail,
          status: RelationshipStatus.RECEIVED,
          initiatedBy: senderEmail,
          message: message || null,
        });
        await this.relationshipRepository.save(newReverseRelationship);
      }
    } else {
      // T·∫°o relationship m·ªõi
      relationship = this.relationshipRepository.create({
        userEmail: senderEmail,
        friendEmail: friendEmail,
        status: RelationshipStatus.PENDING,
        initiatedBy: senderEmail,
        message: message || null,
      });
      relationship = await this.relationshipRepository.save(relationship);

      // 5. T·∫°o relationship ng∆∞·ª£c l·∫°i (bidirectional)
      const reverseRelationship = this.relationshipRepository.create({
        userEmail: friendEmail,
        friendEmail: senderEmail,
        status: RelationshipStatus.RECEIVED,
        initiatedBy: senderEmail,
        message: message || null,
      });
      await this.relationshipRepository.save(reverseRelationship);
    }

    return {
      success: true,
      message: 'L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
      relationship: {
        id: relationship.id,
        friend: {
          id: friendUser.id,
          email: friendUser.email,
          username: friendUser.username,
          name: friendUser.name,
          avatar: friendUser.avatar,
        },
        status: relationship.status,
        initiatedBy: relationship.initiatedBy,
        message: relationship.message,
        createdAt: relationship.createdAt,
        acceptedAt: relationship.acceptedAt,
      },
    };
  }

  /**
   * Ki·ªÉm tra m·ªëi quan h·ªá ƒë√£ t·ªìn t·∫°i (public method ƒë·ªÉ c√°c service kh√°c s·ª≠ d·ª•ng)
   */
  async checkExistingRelationship(
    userEmail: string,
    friendEmail: string
  ): Promise<Relationship | null> {
    return await this.relationshipRepository.findOne({
      where: [
        { userEmail, friendEmail },
      ],
    });
  }

  /**
   * Ki·ªÉm tra m·ªëi quan h·ªá bidirectional (c·∫£ 2 chi·ªÅu)
   */
  async checkBidirectionalRelationship(
    userEmail: string,
    friendEmail: string
  ): Promise<{ primary: Relationship | null; reverse: Relationship | null }> {
    const [primary, reverse] = await Promise.all([
      this.relationshipRepository.findOne({
        where: { userEmail, friendEmail }
      }),
      this.relationshipRepository.findOne({
        where: { userEmail: friendEmail, friendEmail: userEmail }
      })
    ]);

    return { primary, reverse };
  }

  /**
   * T·∫°o friendship t·ª± ƒë·ªông ch·∫•p nh·∫≠n (d√πng cho sync)
   */
  async createAutoAcceptedFriendship(
    userEmail: string,
    friendEmail: string,
    message: string
  ): Promise<{ created: boolean; message: string; relationship?: Relationship }> {

    // Ki·ªÉm tra relationship ƒë√£ t·ªìn t·∫°i
    const { primary, reverse } = await this.checkBidirectionalRelationship(userEmail, friendEmail);

    // N·∫øu ƒë√£ l√† b·∫°n
    if (primary?.status === RelationshipStatus.ACCEPTED || reverse?.status === RelationshipStatus.ACCEPTED) {
      return { created: false, message: 'Already friends' };
    }

    // N·∫øu c√≥ pending request
    if (primary?.status === RelationshipStatus.PENDING ||
        primary?.status === RelationshipStatus.RECEIVED ||
        reverse?.status === RelationshipStatus.PENDING ||
        reverse?.status === RelationshipStatus.RECEIVED) {
      return { created: false, message: 'Pending request exists' };
    }

    const now = new Date();

    // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t primary relationship
    let primaryRelationship: Relationship;
    if (primary) {
      primary.status = RelationshipStatus.ACCEPTED;
      primary.initiatedBy = userEmail;
      primary.message = message;
      primary.acceptedAt = now;
      primary.blockedAt = null;
      primaryRelationship = await this.relationshipRepository.save(primary);
    } else {
      primaryRelationship = this.relationshipRepository.create({
        userEmail,
        friendEmail,
        status: RelationshipStatus.ACCEPTED,
        initiatedBy: userEmail,
        message,
        acceptedAt: now
      });
      primaryRelationship = await this.relationshipRepository.save(primaryRelationship);
    }

    // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t reverse relationship
    if (reverse) {
      reverse.status = RelationshipStatus.ACCEPTED;
      reverse.initiatedBy = userEmail;
      reverse.message = message;
      reverse.acceptedAt = now;
      reverse.blockedAt = null;
      await this.relationshipRepository.save(reverse);
    } else {
      const reverseRelationship = this.relationshipRepository.create({
        userEmail: friendEmail,
        friendEmail: userEmail,
        status: RelationshipStatus.ACCEPTED,
        initiatedBy: userEmail,
        message,
        acceptedAt: now
      });
      await this.relationshipRepository.save(reverseRelationship);
    }

    return {
      created: true,
      message: 'Friendship created successfully',
      relationship: primaryRelationship
    };
  }
  
  /**
   * L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ nh·∫≠n
   */
  async getFriendRequests(
    userEmail: string,
    query: GetFriendRequestsDto
  ): Promise<{ requests: FriendRequestDto[]; total: number }> {
    const { page = 1, limit = 20 } = query;
    const skip = (page - 1) * limit;

    // T√¨m nh·ªØng relationship m√† user l√† ng∆∞·ªùi nh·∫≠n v√† status = PENDING
    const [relationships, total] = await this.relationshipRepository.findAndCount({
    where: {
      friendEmail: userEmail, // ‚úÖ User hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi
      status: RelationshipStatus.PENDING,
    },
    order: {
      createdAt: 'DESC',
    },
    take: limit,
    skip,
  });

    console.log('üîç Debug getFriendRequests:');
    console.log('- userEmail:', userEmail);
    console.log('- requests found:', relationships.length);
    console.log('- total:', total);

    // ‚úÖ OPTIMIZED: Batch load sender users ƒë·ªÉ tr√°nh N+1 queries
    const senderEmails = relationships.map(r => r.userEmail);
    const senderUsersMap = await this.userContextService.getUsersByEmails(senderEmails);

    // Transform data th√†nh format c·∫ßn thi·∫øt cho frontend
    const requests: FriendRequestDto[] = relationships.map((relationship) => {
      const senderUser = senderUsersMap.get(relationship.userEmail);

      return {
        id: relationship.id,
        sender: {
          id: senderUser?.id || '',
          email: relationship.userEmail,
          username: senderUser?.username || '',
          name: senderUser?.name || '',
          avatar: senderUser?.avatar || null,
        },
        message: relationship.message,
        createdAt: relationship.createdAt,
        canAccept: true,
        canReject: true,
      };
    });

    return { requests, total };
  }

  /**
   * Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
   */
  async acceptFriendRequest(
    userEmail: string,
    requestId: string
  ): Promise<FriendRequestActionResponseDto> {

    // Ki·ªÉm tra xem l·ªùi m·ªùi c√≥ t·ªìn t·∫°i kh√¥ng v√† v·∫´n c√≤n PENDING
    const currentRelationship = await this.relationshipRepository.findOne({
      where: { id: requestId }
    });
    
    if (!currentRelationship || currentRelationship.status !== RelationshipStatus.PENDING) {
      throw new ConflictException('L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c kh√¥ng t·ªìn t·∫°i');
    }
    
    // 1. T√¨m relationship request
    const relationship = await this.relationshipRepository.findOne({
      where: {
        id: requestId,
        friendEmail: userEmail, // ƒê·∫£m b·∫£o user hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n
        status: RelationshipStatus.PENDING,
      },
    });

    if (!relationship) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n ho·∫∑c l·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω');
    }

    // 2. C·∫≠p nh·∫≠t relationship th√†nh ACCEPTED
    relationship.status = RelationshipStatus.ACCEPTED;
    relationship.acceptedAt = new Date();
    const updatedRelationship = await this.relationshipRepository.save(relationship);

    // 3. C·∫≠p nh·∫≠t relationship ng∆∞·ª£c l·∫°i (bidirectional)
    const reverseRelationship = await this.relationshipRepository.findOne({
      where: {
        userEmail: relationship.userEmail,
        friendEmail: userEmail,
      },
    });

    if (reverseRelationship) {
      reverseRelationship.status = RelationshipStatus.ACCEPTED;
      reverseRelationship.acceptedAt = new Date();
      await this.relationshipRepository.save(reverseRelationship);
    }

    // 4. L·∫•y th√¥ng tin sender ƒë·ªÉ return
    const senderUser = await this.usersService.findByEmail(relationship.userEmail);

    return {
      success: true,
      message: 'ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n',
      relationship: {
        id: updatedRelationship.id,
        friend: {
          id: senderUser?.id || '',
          email: senderUser?.email || relationship.userEmail,
          username: senderUser?.username || '',
          name: senderUser?.name || '',
          avatar: senderUser?.avatar || null,
        },
        status: updatedRelationship.status,
        initiatedBy: updatedRelationship.initiatedBy,
        message: updatedRelationship.message,
        createdAt: updatedRelationship.createdAt,
        acceptedAt: updatedRelationship.acceptedAt,
      },
    };
  }

  /**
   * T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
   */
  async rejectFriendRequest(
    userEmail: string,
    requestId: string
  ): Promise<FriendRequestActionResponseDto> {
    // 1. T√¨m relationship request
    const relationship = await this.relationshipRepository.findOne({
      where: {
        id: requestId,
        friendEmail: userEmail, // ƒê·∫£m b·∫£o user hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n
        status: RelationshipStatus.PENDING,
      },
    });

    if (!relationship) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n ho·∫∑c l·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω');
    }

    // 2. C·∫≠p nh·∫≠t relationship th√†nh REJECTED
    relationship.status = RelationshipStatus.REJECTED;
    await this.relationshipRepository.save(relationship);

    // 3. C·∫≠p nh·∫≠t relationship ng∆∞·ª£c l·∫°i
    const reverseRelationship = await this.relationshipRepository.findOne({
      where: {
        userEmail: userEmail,
        friendEmail: relationship.userEmail,
      },
    });

    if (reverseRelationship) {
      reverseRelationship.status = RelationshipStatus.REJECTED;
      await this.relationshipRepository.save(reverseRelationship);
    }

    return {
      success: true,
      message: 'ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n',
      requestId: requestId,
    };
  }
}